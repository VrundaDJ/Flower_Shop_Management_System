/*CREATE TABLE INVENTORY 
(FLOWER_ID NUMBER CONSTRAINT INVENTORY_PK PRIMARY KEY ,
 FLOWER_NAME VARCHAR2(20) NOT NULL ,
 F_QUANTITY NUMBER NOT NULL 
 );
 SELECT * FROM INVENTORY ;
 DROP TABLE INVENTORY ;
 INSERT INTO INVENTORY VALUES (1,'Rose',300);
 INSERT INTO INVENTORY VALUES (2,'Lilly',300);
 INSERT INTO INVENTORY VALUES (3,'Tulip',300);
 INSERT INTO INVENTORY VALUES (4,'Orchid',300);
 INSERT INTO INVENTORY VALUES (5,'Daisy',300);
 INSERT INTO INVENTORY VALUES (6,'Sunflower',300);*/
-------------------------------------------------------------------------------------------------
CREATE TABLE STOCK
( PRODUCT_ID NUMBER ,
  S_QUANTITY NUMBER NOT NULL ,
  CONSTRAINT S_P_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
  ON DELETE SET NULL,
  AV_STOCK NUMBER NOT NULL
);
SELECT * FROM STOCK;
--DROP TABLE STOCK;
INSERT INTO STOCK VALUES (501,10,10);
INSERT INTO STOCK VALUES (502,10,10);
INSERT INTO STOCK VALUES (503,10,10);
INSERT INTO STOCK VALUES (504,10,10);
INSERT INTO STOCK VALUES (505,10,10);
INSERT INTO STOCK VALUES (506,10,10);
INSERT INTO STOCK VALUES (507,50,50);
INSERT INTO STOCK VALUES (508,50,50);
INSERT INTO STOCK VALUES (509,50,50);
INSERT INTO STOCK VALUES (510,50,50);
INSERT INTO STOCK VALUES (511,50,50);
INSERT INTO STOCK VALUES (512,50,50);

UPDATE STOCK
SET 
S_QUANTITY = 10
WHERE PRODUCT_ID BETWEEN 501 AND 506; 

UPDATE STOCK
SET 
S_QUANTITY = 50
WHERE PRODUCT_ID BETWEEN 507 AND 512; 

ALTER TABLE STOCK ADD(AV_STOCK NUMBER NOT NULL) ;
TRUNCATE TABLE STOCK;
-------------------------------------------------------------------------------------------------
CREATE TABLE VENDOR
(VENDOR_ID NUMBER CONSTRAINT VENDOR_PK PRIMARY KEY ,
 VNAME VARCHAR2(20)NOT NULL ,
 PHONE_NO VARCHAR2(13) NOT NULL UNIQUE ,
 CITY VARCHAR2(20) NOT NULL
 );
 SELECT * FROM VENDOR;
 DROP TABLE VENDOR;
 INSERT INTO VENDOR VALUES (101,'Akshay','8237549295','Pune');
 INSERT INTO VENDOR VALUES (102,'Abhay','7218191639','Ahmednagar');
 INSERT INTO VENDOR VALUES (103,'Sagar','9812567439','Nashik');
 INSERT INTO VENDOR VALUES (104,'Nandini','7276978700','Pune');
 INSERT INTO VENDOR VALUES (105,'Sharda','9284505937','Pune');
------------------------------------------------------------------------------------------------
CREATE SEQUENCE VEN_ORD
INCREMENT BY 1 
START WITH 201
MINVALUE 201
MAXVALUE 300
NOCYCLE 
NOCACHE ;
 
CREATE TABLE VENDOR_ORDER
 (VO_ID NUMBER CONSTRAINT VENDOR_ORDER_PK PRIMARY KEY ,
  FLOWER_NAME VARCHAR2(20) NOT NULL ,
  QUANTITY NUMBER NOT NULL ,
  VO_DATE DATE ,
  TOTAL_PRICE NUMBER NOT NULL ,
  VENDOR_ID NUMBER ,
  CONSTRAINT V_O_FK FOREIGN KEY (VENDOR_ID) REFERENCES VENDOR(VENDOR_ID)
  ON DELETE SET NULL ,
  CHECK (QUANTITY > 0)
 );
 SELECT * FROM VENDOR_ORDER;
 DELETE FROM VENDOR_ORDER WHERE VO_ID=211;
 DROP TABLE VENDOR_ORDER ;
 --INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Lilly',200,'14-08-22',4000,103);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Daisy',150,'01-09-22',3300,103);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Tulip',200,'10-09-22',5000,101);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Lilly',100,'15-09-22',2000,105);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Rose',350,'20-09-22',2800,104);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Sunflower',170,'01-11-22',2720,105);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Tulip',210,'20-11-22',5250,104);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Rose',310,'22-11-22',2480,102);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Orchid',80,'25-11-22',2800,102);
 INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,'Lilly',75,'30-11-22',1500,101);
 ------------------------------------------------------------------------------------------------
 CREATE TABLE PRODUCT
 (PRODUCT_ID NUMBER CONSTRAINT PRODUCT_PK PRIMARY KEY ,
  PRODUCT_NAME VARCHAR2(20) NOT NULL UNIQUE ,
  PRICE NUMBER NOT NULL
  );
SELECT * FROM PRODUCT ;
DROP TABLE PRODUCT;
INSERT INTO PRODUCT VALUES (501,'Cascade Bouquet',501);
INSERT INTO PRODUCT VALUES (502,'Posy Bouquet',700);
INSERT INTO PRODUCT VALUES (503,'Basket Bouquet',450);
INSERT INTO PRODUCT VALUES (504,'Pomander Bouquet',800);
INSERT INTO PRODUCT VALUES (505,'Nosegay Bouquet',300);
INSERT INTO PRODUCT VALUES (506,'Round Bouquet',1000);
INSERT INTO PRODUCT VALUES (507,'Rose',15);
INSERT INTO PRODUCT VALUES (508,'Lilly',28);
INSERT INTO PRODUCT VALUES (509,'Tulip',30);
INSERT INTO PRODUCT VALUES (510,'Orchid',45);
INSERT INTO PRODUCT VALUES (511,'Daisy',30);
INSERT INTO PRODUCT VALUES (512,'Sunflower',20);
-------------------------------------------------------------------------------------------------
CREATE TABLE QUANTITY 
(PRODUCT_ID NUMBER ,
 ROSE NUMBER NOT NULL ,
 LILLY NUMBER NOT NULL ,
 TULIP NUMBER NOT NULL ,
 ORCHID NUMBER NOT NULL ,
 DAISY NUMBER NOT NULL ,
 SUNFLOWER NUMBER NOT NULL ,
 CONSTRAINT P_Q_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
 ON DELETE SET NULL
);
SELECT * FROM QUANTITY ;
DROP TABLE QUANTITY;
INSERT INTO QUANTITY VALUES (501,5,0,3,0,2,0);
INSERT INTO QUANTITY VALUES (502,10,0,0,0,0,0);
INSERT INTO QUANTITY VALUES (503,3,3,3,3,3,3);
INSERT INTO QUANTITY VALUES (504,3,0,4,2,7,3);
INSERT INTO QUANTITY VALUES (505,2,4,3,0,1,0);
INSERT INTO QUANTITY VALUES (506,1,4,7,3,5,7);
INSERT INTO QUANTITY VALUES (507,1,0,0,0,0,0);
INSERT INTO QUANTITY VALUES (508,0,1,0,0,0,0);
INSERT INTO QUANTITY VALUES (509,0,0,1,0,0,0);
INSERT INTO QUANTITY VALUES (510,0,0,0,1,0,0);
INSERT INTO QUANTITY VALUES (511,0,0,0,0,1,0);
INSERT INTO QUANTITY VALUES (512,0,0,0,0,0,1);
------------------------------------------------------------------------------------------------------------
CREATE SEQUENCE CUST
INCREMENT BY 1
START WITH 1001
MINVALUE 1001
MAXVALUE 2000
NOCYCLE 
NOCACHE;

CREATE TABLE CUSTOMER
( CUSTOMER_ID NUMBER CONSTRAINT CUSTOMER_PK PRIMARY KEY ,
  CNAME VARCHAR2(20) NOT NULL ,
  PHONE_NO VARCHAR2(13) NOT NULL UNIQUE ,
  EMAIL VARCHAR2(20) UNIQUE
);
SELECT * FROM CUSTOMER;
DROP TABLE CUSTOMER;
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Riya','7588701475','Riya@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Vidya','9145007641','Vidya@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Abha','9763921818','Abha@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Viraj','7038847873','Viraj@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Pratiksha','8421122209','Pratiksha@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Jineesha','7350730447','Jineesha@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Dev','9561222746','Dev@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Saurav','8830521840','Saurav@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Ashwin','8975467234','Ashwin@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Mukul','7709905826','Mukul@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Anuja','7385180298','Anuja@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Chaman','9922488980','Chaman@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Denali','7020588306','Denali@gmail.com');
INSERT INTO CUSTOMER VALUES (CUST.NEXTVAL,'Hansa','9420892923','Hansa@gmail.com');
------------------------------------------------------------------------------------------------------------
CREATE SEQUENCE ORD
INCREMENT BY 10
START WITH 10
MINVALUE 10
MAXVALUE 1000
NOCYCLE
NOCACHE;

CREATE TABLE ORDERS
(ORDER_ID NUMBER CONSTRAINT ORDERS_PK PRIMARY KEY ,
 DATE_TIME TIMESTAMP NOT NULL ,
 CUSTOMER_ID NUMBER ,
 CONSTRAINT C_O_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
 ON DELETE SET NULL
);
SELECT * FROM ORDERS ;
DROP TABLE ORDERS;
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '20-08-22', 1001);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '20-08-22', 1002);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '20-08-22', 1003);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '20-08-22', 1004);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '21-08-22', 1005);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '03-09-22', 1006);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '04-09-22', 1007);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '04-09-22', 1008);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '05-09-22', 1009);
INSERT INTO ORDERS VALUES (ORD.NEXTVAL, '05-09-22', 1010);
------------------------------------------------------------------------------------------------------------
CREATE TABLE PRO_ORD 
(PRODUCT_ID NUMBER ,
 ORDER_ID NUMBER ,
 QUANTITY NUMBER NOT NULL ,
 TOTAL_PRICE NUMBER NOT NULL ,
 CONSTRAINT PRO_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
 ON DELETE SET NULL,
 CONSTRAINT ORD_FK FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
 ON DELETE SET NULL,
 CONSTRAINT PRO_ORD_PK PRIMARY KEY (PRODUCT_ID,ORDER_ID),
 CHECK (QUANTITY > 0)
);
SELECT * FROM PRO_ORD;
DROP TABLE PRO_ORD;
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(502, 10, 3, 2100);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(511, 10, 4, 120);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(506, 20, 2, 2000);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(503, 30, 4, 1800);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(508, 30, 2, 56);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(509, 30, 1, 30);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(512, 40, 6, 120);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(505, 40, 2, 600);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(501, 50, 1, 500);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(509, 50, 4, 120);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(505, 50, 2, 600);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(504, 50, 1, 800);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(509, 60, 5, 150);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(504, 60, 3, 2400);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(512, 60, 7, 140);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(507, 70, 1, 15);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(503, 80, 3, 1350);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(501, 80, 2, 1000);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(510, 80, 10, 450);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(504, 90, 5, 4000);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(507, 90, 9, 135);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(510, 90, 12, 540);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(511, 90, 9, 270);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(502, 90, 4, 2800);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(505, 100, 9, 2700);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(509, 100, 8, 240);
INSERT INTO PRO_ORD(PRODUCT_ID, ORDER_ID, QUANTITY, TOTAL_PRICE)
VALUES(510, 100, 5, 225);

------------------------------------------------------------------------------------------------
CREATE SEQUENCE BILL
INCREMENT BY 1
START WITH 2001
MINVALUE 2001
MAXVALUE 3000
NOCYCLE
NOCACHE;
DROP SEQUENCE BILL ;
CREATE TABLE BILLING
( BILL_ID NUMBER CONSTRAINT BILLING_PK PRIMARY KEY ,
 ORDER_ID NUMBER ,
 TOTAL_AMOUNT NUMBER NOT NULL ,
 SHOP_ADDRESS VARCHAR2(20) NOT NULL ,
 CONSTRAINT B_O_FK FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
 ON DELETE SET NULL
);
SELECT * FROM BILLING;
DROP TABLE BILLING;
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 10, 2220, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 20, 2000, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 30, 1886, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 40, 720, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 50, 2020, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 60, 2690, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 70, 15, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 80, 2800, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 90, 7745, 'Baner, Pune');
INSERT INTO BILLING(BILL_ID, ORDER_ID, TOTAL_AMOUNT, SHOP_ADDRESS)
VALUES(BILL.NEXTVAL, 100, 3165, 'Baner, Pune');
-------------------------------------------------------------------------------------------------------------------
----COST_PRICE_TABLE---------------------------------------------------------------------------------------------------------------
CREATE TABLE RATE_CARD
(FLOWER_NAME VARCHAR2(20)NOT NULL UNIQUE ,
 V_PRICE NUMBER NOT NULL
 );
SELECT * FROM RATE_CARD;
INSERT INTO RATE_CARD VALUES('Rose',8);
INSERT INTO RATE_CARD VALUES('Lilly',20);
INSERT INTO RATE_CARD VALUES('Tulip',25);
INSERT INTO RATE_CARD VALUES('Orchid',35);
INSERT INTO RATE_CARD VALUES('Daisy',22);
INSERT INTO RATE_CARD VALUES('Sunflower',16);

COMMIT;
-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE SALE 
(DATE_TIME DATE CONSTRAINT SALE_PK PRIMARY KEY ,
 TOTAL_SALE NUMBER NOT NULL );
 SELECT * FROM SALE;
 DROP TABLE SALE;
-----------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
---VIEW_ON_PRODUCT_QUANTITY_JOIN-----------------------------------------------------------
CREATE OR REPLACE VIEW PRO_QUA
AS
SELECT P.PRODUCT_ID,P.PRODUCT_NAME,P.PRICE ,
       Q.ROSE,Q.LILLY,Q.TULIP,Q.ORCHID,Q.DAISY,Q.SUNFLOWER
FROM PRODUCT P JOIN QUANTITY Q
ON(P.PRODUCT_ID=Q.PRODUCT_ID);
SELECT * FROM PRO_QUA;
---------------------------------------------------------------------------------------------
--VIEW_ON_CUSTOMER_ORDER_BILLING-------------------------------------------------------------
CREATE OR REPLACE VIEW CUST_ORD_BIL
AS
SELECT C.CUSTOMER_ID,C.CNAME,C.PHONE_NO ,
       O.ORDER_ID,
       B.BILL_ID,B.TOTAL_AMOUNT
FROM CUSTOMER C JOIN ORDERS O
ON(C.CUSTOMER_ID=O.CUSTOMER_ID)
JOIN BILLING B
ON(O.ORDER_ID=B.ORDER_ID);
SELECT * FROM CUST_ORD_BIL;
-------------------------------------------------------------------------------------------------
--VIEW_ON_VENDOR_VENDOR_ORDER--------------------------------------------------------------------
CREATE OR REPLACE VIEW VEN_VEN_ORD
AS
SELECT V.VENDOR_ID,V.VNAME,V.PHONE_NO ,
       O.VO_ID,O.FLOWER_NAME,O.QUANTITY,O.TOTAL_PRICE,O.VO_DATE
FROM VENDOR V JOIN VENDOR_ORDER O
ON(V.VENDOR_ID=O.VENDOR_ID);
SELECT * FROM VEN_VEN_ORD;
--------------------------------------------------------------------------------------------------------
--VIEW_ON_PRODUCT_STOCK---------------------------------------------------------------------------------
CREATE OR REPLACE VIEW PRO_STO
AS
SELECT P.PRODUCT_ID,P.PRODUCT_NAME,P.PRICE,
       S.S_QUANTITY
FROM PRODUCT P JOIN STOCK S
ON(P.PRODUCT_ID=S.PRODUCT_ID);
SELECT * FROM PRO_STO;
-------------------------------------------------------------------------------------------------------
--VIEW_ON_ORDER_BILLING----------------------------------------------------------------------------
CREATE OR REPLACE VIEW ORD_BIL
AS
SELECT O.DATE_TIME,O.ORDER_ID,B.BILL_ID,O.CUSTOMER_ID,B.TOTAL_AMOUNT,B.SHOP_ADDRESS
FROM ORDERS O JOIN BILLING B
ON(O.ORDER_ID=B.ORDER_ID);
SELECT * FROM ORD_BIL;
-------------------------------------------------------------------------------------------------------
--EXCEPTIONS_3-PREDEFINED_2-USERDEFINED-------------------------------------------------------------------
--NO_DATA_FOUND-----------------------------------------------------------------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE PROC_PRODUCT(PID NUMBER)
IS
P_ID PRODUCT.PRODUCT_ID%TYPE;
P_NAME PRODUCT.PRODUCT_NAME%TYPE;
P_PRICE PRODUCT.PRICE%TYPE;
BEGIN
   SELECT PRODUCT_ID,PRODUCT_NAME,PRICE 
   INTO P_ID,P_NAME,P_PRICE
   FROM PRODUCT 
   WHERE PRODUCT_ID = PID;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.PUT_LINE('ENTER CORRECT PRODUCT ID');
END;
EXEC PROC_PRODUCT(512); 
---------------------------------------------------------------------------------------------------------------------------
--INVALID_CURSOR-----------------------------------------------------------------------------------------------------------
------------------INPUT BILL ID AND SHOW DETAILS FOR BILL---------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE CUST_BILL (ID NUMBER)
IS 
    TYPE CUST_REC IS RECORD 
    (BID NUMBER ,
     OID1 NUMBER,
     T_AMOUNT NUMBER);
  CUST CUST_REC;
  
BEGIN 
        SELECT BILL_ID , ORDER_ID , TOTAL_AMOUNT 
        INTO CUST
        FROM BILLING
        WHERE BILL_ID =ID;
     DBMS_OUTPUT.PUT_LINE(CUST.BID||' '||CUST.OID1||' '||CUST.T_AMOUNT);
   
EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
        DBMS_OUTPUT.PUT_LINE('ENTER CORRECT ID');
        /*WHEN TOO_MANY_ROWS
        THEN
        DBMS_OUTPUT.PUT_LINE('NEED CURSOR');*/
END;

EXECUTE CUST_BILL(&ID);
----------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON 
CREATE OR REPLACE PROCEDURE PRODUCT_ORD (ID NUMBER)
IS 
    CURSOR PRO_C IS 
    SELECT ORDER_ID , QUANTITY 
    FROM PRO_ORD
    WHERE PRODUCT_ID = ID;

TYPE ORD_P IS RECORD 
(OID NUMBER,
 QUAN NUMBER);
ORD ORD_P ;

BEGIN 
        OPEN PRO_C ;
        LOOP
        FETCH PRO_C INTO ORD;
        EXIT WHEN PRO_C%NOTFOUND;
       DBMS_OUTPUT.PUT_LINE(ORD.OID||' '||ORD.QUAN);
     END LOOP;
     CLOSE PRO_C;

EXCEPTION
    WHEN INVALID_CURSOR
    THEN 
    DBMS_OUTPUT.PUT_LINE('CHECK CURSOR OPENING');
    
END; 

EXECUTE PRODUCT_ORD(&ID);
-------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE PRO_ORD_QUA(PID NUMBER ,ORID NUMBER ,QU NUMBER ,TOTAL_P NUMBER)
IS
  ORDER_NOT_PLACED EXCEPTION ;
BEGIN
  INSERT INTO PRO_ORD VALUES(PID,ORID,QU,TOTAL_P);
  
  IF SQL%NOTFOUND 
  THEN 
  RAISE ORDER_NOT_PLACED ;
  END IF;
  COMMIT;
EXCEPTION
  WHEN ORDER_NOT_PLACED
  THEN 
  DBMS_OUTPUT.PUT_LINE('QUANTITY CAN NOT BE ZERO');
END;
EXEC PRO_ORD_QUA(508,100,0,0);
---------------------------------------------------------------------------------------------------
--CALCULATE_TOTAL_PRICE_IN_PRO_ORD
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION PRO_ORD_PRICE(PRO_ID NUMBER ,QUAN NUMBER)
RETURN NUMBER
IS
TOTAL NUMBER := 0;
PRIC NUMBER ;
BEGIN
   SELECT PRICE INTO PRIC 
   FROM PRODUCT
   WHERE PRODUCT_ID = PRO_ID ;
   
   TOTAL := QUAN * PRIC ;
   
   RETURN TOTAL ;
END; 

DECLARE 
PRICE NUMBER;
BEGIN 
PRICE:=PRO_ORD_PRICE(506,2);
DBMS_OUTPUT.PUT_LINE(PRICE);
END;
----------------------------------------------------------------------------------------------------
--
INSERT INTO ORDERS VALUES(115,SYSDATE,1005);
INSERT INTO PRO_ORD VALUES(509,115,3,PRO_ORD_PRICE(509,3));

SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE PRO_ORD_PROC(PRO IN NUMBER , ORD_ID NUMBER , QUANT IN NUMBER)
IS 
 NOT_INSERTED EXCEPTION;
BEGIN
     INSERT INTO PRO_ORD VALUES(509,115,3,PRO_ORD_PRICE(509,3));
     
     IF SQL%NOTFOUND
     THEN 
        RAISE NOT_INSERTED;
     END IF;
     
     COMMIT;
EXCEPTION 
   WHEN NOT_INSERTED
   THEN DBMS_OUTPUT.PUT_LINE('ORDER NOT INSERTED');
END;

EXEC PRO_ORD_PROC(512,110,6);
-----------------------------------------------------------------------------------------------------
--TO_CALCULATE_BILL_AMOUNT--------------------------------------------------------------
CREATE OR REPLACE PROCEDURE BILL_PROC(ORD_ID NUMBER)
IS
PRO_ID NUMBER;
TOTAL_PRI NUMBER;
TOTAL_AMT NUMBER:=0;

  CURSOR BILL_CUR
  IS 
    SELECT PRODUCT_ID,TOTAL_PRICE
    FROM PRO_ORD
    WHERE ORDER_ID = ORD_ID ;
    
BEGIN
   OPEN BILL_CUR;
   LOOP
      FETCH BILL_CUR INTO PRO_ID,TOTAL_PRI;
   EXIT WHEN BILL_CUR%NOTFOUND;
     TOTAL_AMT:=TOTAL_AMT+TOTAL_PRI;
    END LOOP ;
 
    CLOSE BILL_CUR;
    
    INSERT INTO BILLING(BILL_ID,ORDER_ID,TOTAL_AMOUNT,SHOP_ADDRESS)
    VALUES(BILL.NEXTVAL,ORD_ID,TOTAL_AMT,'Baner,Pune');
    COMMIT;
    
EXCEPTION
  WHEN INVALID_CURSOR
  THEN DBMS_OUTPUT.PUT_LINE('CURSOR ERROR');
  
  WHEN DUP_VAL_ON_INDEX
  THEN DBMS_OUTPUT.PUT_LINE('BILL GENEGRATED ALREADY');
  
END;
EXECUTE BILL_PROC(110);
------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION VENDOR_ORDER_FUN(FLO_NAME VARCHAR2,QUANT NUMBER)
RETURN NUMBER
IS
TOTAL_P NUMBER:=0;
PRIC NUMBER;
BEGIN
   SELECT V_PRICE INTO PRIC
   FROM RATE_CARD
   WHERE FLOWER_NAME = FLO_NAME ;
   
   TOTAL_P := PRIC * QUANT ;
   RETURN TOTAL_P;
END;

--PROCEDURE--
CREATE OR REPLACE PROCEDURE VENDOR_ORDER_PROC(VO_ID IN NUMBER , FLO_NAME VARCHAR2,
                                              QUANT NUMBER,V_ID NUMBER ,O_DATE DATE)
IS
TOTAL_PRICE NUMBER;
NOT_INSERT EXCEPTION;

BEGIN
   INSERT INTO VENDOR_ORDER(VO_ID,FLOWER_NAME,QUANTITY,VENDOR_ID,TOTAL_PRICE,VO_DATE)
   VALUES(VO_ID,FLO_NAME,QUANT,V_ID,VENDOR_ORDER_FUN(FLO_NAME,QUANT),O_DATE);
   
   IF SQL%NOTFOUND
   THEN
       RAISE NOT_INSERT;
   END IF;
   
   COMMIT;
EXCEPTION
    WHEN NOT_INSERT
    THEN DBMS_OUTPUT.PUT_LINE('DATA NOT INSERTED');
    
    WHEN OTHERS
    THEN DBMS_OUTPUT.PUT_LINE('CHECK YOUR INPUTS');
END;

EXEC VENDOR_ORDER_PROC(211,'Tulip',2,102,'29-09-22');
------------------------------------------------------------------------------------------------------------------------------------------
SELECT O.DATE_TIME ,SUM(B.TOTAL_AMOUNT)
FROM ORDERS O JOIN BILLING B
ON(O.ORDER_ID=B.ORDER_ID)
GROUP BY O.DATE_TIME ;
----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE SALE_PROC(DT DATE)
IS 
TOTAL NUMBER;
NOT_INSERTED EXCEPTION;
BEGIN 
  SELECT SUM(B.TOTAL_AMOUNT)INTO TOTAL
  FROM ORDERS O JOIN BILLING B
  ON(O.ORDER_ID=B.ORDER_ID)
  WHERE DATE_TIME = DT
  GROUP BY O.DATE_TIME ;
  
  INSERT INTO SALE VALUES(DT,TOTAL);
 
  IF SQL%NOTFOUND
  THEN 
    RAISE NOT_INSERTED;
  END IF;
EXCEPTION
  WHEN NOT_INSERTED
  THEN 
     DBMS_OUTPUT.PUT_LINE('SALE NOT INSERTED');
  WHEN OTHERS
  THEN 
     DBMS_OUTPUT.PUT_LINE('CHECK INPUT.');
END;

EXEC SALE_PROC('29-09-22');
-----------------------------------------------------------------------------------------------------------------------
SELECT DATE_TIME,TOTAL_SALE,LAG(TOTAL_SALE,1,0)OVER(ORDER BY DATE_TIME )AS LAG_T
FROM SALE;
-------------------------------------------------------------------------------------------------------------------
SELECT DATE_TIME,TOTAL_SALE,DENSE_RANK()OVER(ORDER BY TOTAL_SALE DESC )AS D_SALE
FROM SALE;
-----------------------------------------------------------------------------------------------------------------------
SELECT PRODUCT_ID , DENSE_RANK()OVER(PARTITION BY PRODUCT_ID ORDER BY ORDER_ID )AS HIGH
FROM PRO_ORD;
-------------------------------------------------------------------------------------------------------------------
SELECT DISTINCT(PRODUCT_ID) , COUNT(PRODUCT_ID)OVER(PARTITION BY PRODUCT_ID )AS HIGH
FROM PRO_ORD;
-----------------------------------------------------------------------------------------------------------------------
SELECT DATE_TIME,TOTAL_SALE,LEAD(TOTAL_SALE,1,0)OVER(ORDER BY DATE_TIME )AS LAG_T
FROM SALE;
----------------------------------------------------------------------------------------------------------------------------
SELECT *
FROM (SELECT PRODUCT_ID,ORDER_ID ,
      DENSE_RANK()OVER(ORDER BY ORDER_ID DESC )AS HIGH
      FROM PRO_ORD)TEMP
WHERE TEMP.HIGH<=3;
--------------------------------------------------------------------------------------------------------------------------
--PROCEDURE_8------------------------------------------------------
CREATE OR REPLACE PROCEDURE BUDGET_PROC(PRO_ID NUMBER)
IS 

  CURSOR BUD_CUR
  IS 
  SELECT * 
  FROM PRODUCT 
  WHERE PRICE < (SELECT PRICE 
               FROM PRODUCT
               WHERE PRODUCT_ID = PRO_ID);
BEGIN
    FOR BUD_REC IN BUD_CUR
    LOOP
      DBMS_OUTPUT.PUT_LINE(BUD_REC.PRODUCT_ID || CHR(9)||BUD_REC.PRODUCT_NAME|| CHR(9) || BUD_REC.PRICE);
    END LOOP;
END;

EXEC BUDGET_PROC(509);
--------------------------------------------------------------------------------------------------------------------------
--PROCEDURE_9------------------------------------------------
CREATE OR REPLACE PROCEDURE SALE_PROC_2(DT DATE)
IS

    CURSOR S_CUR
    IS 
    SELECT *
    FROM SALE
    WHERE TOTAL_SALE > (SELECT TOTAL_SALE 
                        FROM SALE
                        WHERE DATE_TIME = DT);
BEGIN
    FOR S_REC IN S_CUR
    LOOP
       DBMS_OUTPUT.PUT_LINE(S_REC.DATE_TIME || CHR(9) || S_REC.TOTAL_SALE);
    END LOOP;
END;

EXEC SALE_PROC_2('04-09-22');    
------------------------------------------------------------------------------------------------------------------------------------------
--PROCEDURE_10-------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE SALE_PROC_2(DT DATE)
IS

    CURSOR S_CUR
    IS 
    SELECT *
    FROM SALE
    WHERE TOTAL_SALE < (SELECT TOTAL_SALE 
                        FROM SALE
                        WHERE DATE_TIME = DT);
BEGIN
    FOR S_REC IN S_CUR
    LOOP
       DBMS_OUTPUT.PUT_LINE(S_REC.DATE_TIME || CHR(9) || S_REC.TOTAL_SALE);
    END LOOP;
END;

EXEC SALE_PROC_2('04-09-22');  
------------------------------------------------------------------------------------------------------------------------
--PROCEDURE_11---------------------------------------------
CREATE OR REPLACE PROCEDURE PROFIT_LOSS
IS

TOTAL_CP NUMBER ;
TOTAL_SP NUMBER;

BEGIN
     SELECT SUM(TOTAL_PRICE) INTO TOTAL_CP
     FROM VENDOR_ORDER;
     
     SELECT SUM(TOTAL_SALE) INTO TOTAL_SP
     FROM SALE;
     
     IF TOTAL_CP < TOTAL_SP 
     THEN 
        DBMS_OUTPUT.PUT_LINE('CURRENT PROFIT IS : ' ||(TOTAL_SP - TOTAL_CP));
     ELSE 
        DBMS_OUTPUT.PUT_LINE('CURRENT LOSS IS :' ||(TOTAL_CP - TOTAL_SP));
     END IF;
END;

 EXEC PROFIT_LOSS;  
----------------------------------------------------------------------------------------------------------------------------------
--MERGE-----------------------------------------------------------------------------------------------------------------------
CREATE TABLE VENDOR_ORDER_BKP
AS
SELECT * FROM VENDOR_ORDER
WHERE 1=2;

MERGE INTO VENDOR_ORDER_BKP T
USING VENDOR_ORDER S
ON(S.VO_ID=T.VO_ID)
WHEN MATCHED
THEN UPDATE
SET 
   T.FLOWER_NAME=S.FLOWER_NAME,
   T.QUANTITY=S.QUANTITY,
   T.TOTAL_PRICE=S.TOTAL_PRICE,
   T.VENDOR_ID=S.VENDOR_ID,
   T.VO_DATE=S.VO_DATE
WHEN NOT MATCHED
THEN
   INSERT (T.VO_ID,T.FLOWER_NAME,T.QUANTITY,T.TOTAL_PRICE,T.VENDOR_ID,T.VO_DATE)
   VALUES(S.VO_ID,S.FLOWER_NAME,S.QUANTITY,S.TOTAL_PRICE,S.VENDOR_ID,S.VO_DATE);
----------------------------------------------------------------------------------------------------------------------------------
--WITH--------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
--SUBQUERY_JOIN--------------------------------------------------------------------
SELECT O.CUSTOMER_ID,O.ORDER_ID,B.BILL_ID,B.TOTAL_AMOUNT
FROM BILLING B JOIN ORDERS O
ON(O.ORDER_ID=B.ORDER_ID)
WHERE B.TOTAL_AMOUNT > (SELECT AVG(TOTAL_AMOUNT) FROM BILLING);
=====================================================================================================================
SELECT PRODUCT_ID , COUNT(*)
FROM PRO_ORD
GROUP BY PRODUCT_ID
HAVING COUNT(*) > (SELECT COUNT(*)
                   FROM PRO_ORD
                   WHERE PRODUCT_ID = &PID);
--------------------------------------------------------------------------------------------------------------------------------
--WITH--------------------------------------------------------------------------
WITH TEMP
AS
( 
 SELECT VENDOR_ID , SUM(TOTAL_PRICE)AS TOTAL
 FROM VENDOR_ORDER
 GROUP BY VENDOR_ID
 ) 
 SELECT V.VENDOR_ID,V.VNAME,V.PHONE_NO,V.CITY,T.TOTAL
 FROM VENDOR V JOIN TEMP T 
 ON(V.VENDOR_ID=T.VENDOR_ID)
 WHERE V.VENDOR_ID = &VID;
------------------------------------------------------------------------------------------------------------------------------
--TRIGGER ON STOCK TABLE AFTER EVENT INSERT INTO VENDOR ORDER----------------------------------------------------------------
/*CREATE OR REPLACE TRIGGER ST_VEN_ORD
AFTER UPDATE ON STOCK 
BEGIN*/
-----------------------------------------------------------------------------------------------------------------------------
--TRIGGER ON PRO_ORD TABLE AFTER EVENT UPDATE IN STOCK-----------------------------------------------------------------
CREATE OR REPLACE TRIGGER PRO_ORD_STOCK
AFTER INSERT ON PRO_ORD
FOR EACH ROW
DECLARE
    AV_STO STOCK.AV_STOCK%TYPE; 
    S_QUA STOCK.S_QUANTITY%TYPE;
BEGIN
     UPDATE STOCK S
     SET 
     S.AV_STOCK = S.AV_STOCK - :NEW.QUANTITY 
     WHERE S.PRODUCT_ID = :NEW.PRODUCT_ID;
     
     SELECT S.AV_STOCK , S.S_QUANTITY
     INTO AV_STO , S_QUA
     FROM STOCK S
     WHERE S.PRODUCT_ID = :NEW.PRODUCT_ID ; 
     IF (AV_STO < (20/100)* S_QUA)
     THEN 
        INSERT INTO VENDOR_ORDER VALUES(VEN_ORD.NEXTVAL,
        (SELECT PRODUCT_NAME FROM PRODUCT WHERE PRODUCT_ID=:NEW.PRODUCT_ID),50
        ,SYSDATE,
        VENDOR_ORDER_FUN((SELECT PRODUCT_NAME FROM PRODUCT WHERE PRODUCT_ID = :NEW.PRODUCT_ID),50)
        ,104);
     END IF;
     
END;
-------------------------------------------------------------------------------------
INSERT INTO PRO_ORD VALUES (508,120,45,PRO_ORD_PRICE(508,45));

------------------------------------------------------------------------------------------------------------------------------------
--TRIGGER ON STOCK BEFORE EVENT INSERT IN PRO_ORD----------------------------------------------------------------------
CREATE OR REPLACE TRIGGER PRO_ORD_STOCK_B
BEFORE INSERT ON PRO_ORD
FOR EACH ROW 
DECLARE 
    AV_STO STOCK.AV_STOCK%TYPE;
BEGIN
     SELECT STOCK.AV_STOCK
     INTO AV_STO
     FROM STOCK
     WHERE PRODUCT_ID = :NEW.PRODUCT_ID ;
     IF (AV_STO < :NEW.QUANTITY)
     THEN
     RAISE_APPLICATION_ERROR(-20103,'STOCK INSUFFICIENT.');
     END IF ;
END;

INSERT INTO PRO_ORD VALUES (512,120,10,PRO_ORD_PRICE(512,10));
----------------------------------------------------------------------------------------------------------------------------
--TRIGGER ON PRO_ORD AFTER EVENT INSERT IN BILLING------------------------------------------------------------------
CREATE OR REPLACE TRIGGER PRO_ORD_BILL
AFTER INSERT ON PRO_ORD
FOR EACH ROW
DECLARE
 ORD_ID NUMBER ;
BEGIN
    SELECT ORDER_ID INTO ORD_ID FROM PRO_ORD
    WHERE ORDER_ID = ORD_ID;
    
    BILL_PROC(ORD_ID);
END;

INSERT INTO ORDERS VALUES(120,SYSDATE, 1006);
SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = &EID;
INSERT INTO PRO_ORD VALUES(510,120,5,PRO_ORD_PRICE(510,5));
------------------------------------------------------------------------------------------------------------------------------

ALTER TABLE PRO_ORD DISABLE ALL TRIGGERS;

DROP TRIGGER PRO_ORD_BILL;

DELETE FROM PRO_ORD
WHERE ORDER_ID = 120;
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER BILL_SALE
AFTER INSERT ON BILLING
DECLARE
TOTAL NUMBER;
BEGIN
    IF (TO_CHAR(SYSDATE,'HH24:MI')='15:01')
    THEN 
    SELECT SUM(B.TOTAL_AMOUNT)INTO TOTAL
    FROM ORDERS O JOIN BILLING B
    ON(O.ORDER_ID=B.ORDER_ID)
    WHERE O.DATE_TIME = SYSDATE
    GROUP BY O.DATE_TIME ;
    
    INSERT INTO SALE VALUES(SYSDATE,TOTAL);
    
    ELSE
    RAISE_APPLICATION_ERROR(-20103,'INSERTING WILL BE DONE ON 23:58');
    END IF;
END;

DROP TRIGGER BILL_SALE;
COMMIT;
-------------------------------------------------------------------------------------------------
